# Default values for deploy chart
# This is a YAML-formatted file.

# Application configuration
app:
  name: "myapp"
  version: "latest"

# Deployment type: "deployment" or "statefulset"
deploymentType: "deployment"

# Replica count
replicaCount: 1

# Image configuration
image:
  repository: "nginx"
  tag: "latest"
  pullPolicy: IfNotPresent

# Image pull secrets
imagePullSecrets: []
  # Example:
  # - name: myregistrykey

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}
  # Example:
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "8080"

# Pod security context
podSecurityContext: {}
  # Example:
  # runAsNonRoot: true
  # runAsUser: 1001
  # fsGroup: 2000

# Container security context
securityContext: {}
  # Example:
  # allowPrivilegeEscalation: false
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1001
  # capabilities:
  #   drop:
  #   - ALL

# Resource limits and requests
resources: {}
  # Example:
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 250m
  #   memory: 256Mi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

# Node selector
nodeSelector: {}
  # Example:
  # disktype: ssd
  # kubernetes.io/arch: amd64

# Tolerations for taints
tolerations: []
  # Example:
  # - key: "key1"
  #   operator: "Equal"
  #   value: "value1"
  #   effect: "NoSchedule"
  # - key: "key2"
  #   operator: "Exists"
  #   effect: "NoExecute"
  #   tolerationSeconds: 3600

# Affinity rules
affinity: {}
  # Example:
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: kubernetes.io/arch
  #         operator: In
  #         values:
  #         - amd64
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 100
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: app
  #           operator: In
  #           values:
  #           - myapp
  #       topologyKey: kubernetes.io/hostname

# Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 80
  annotations: {}

# Single Ingress configuration (legacy support)
ingress: {}
  # enabled: false
  # className: "haproxy"
  # annotations:
  #   haproxy.org/load-balance: "roundrobin"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: Prefix
  # tls: []

# Multiple Ingresses configuration (advanced)
# Use this for multiple ingress classes, different annotations per domain, etc.
ingresses: {}
  # Example configuration:
  # public:
  #   enabled: true
  #   className: "haproxy"
  #   annotations:
  #     haproxy.org/load-balance: "roundrobin"
  #     haproxy.org/check: "true"
  #   hosts:
  #     - host: myapp.example.com
  #       paths:
  #         - path: /
  #           pathType: Prefix
  #   tls:
  #     - secretName: myapp-tls
  #       hosts:
  #         - myapp.example.com
  # 
  # admin:
  #   enabled: true
  #   className: "nginx"
  #   annotations:
  #     nginx.ingress.kubernetes.io/auth-type: basic
  #     nginx.ingress.kubernetes.io/auth-secret: admin-auth
  #   hosts:
  #     - host: admin.myapp.example.com
  #       paths:
  #         - path: /admin
  #           pathType: Prefix
  #   tls:
  #     - secretName: admin-tls
  #       hosts:
  #         - admin.myapp.example.com

# Domain-based Ingress configuration (generates ingress names from domains)
# Each domain gets its own ingress resource named after the domain
ingressDomains: []
  # Example configuration:
  # - enabled: true
  #   host: "myapp.example.com"
  #   className: "haproxy"
  #   tls: true
  #   tlsSecret: "myapp-example-com-tls"  # Optional, auto-generated if not specified
  #   annotations:
  #     haproxy.org/load-balance: "roundrobin"
  #     haproxy.org/check: "true"
  #   paths:
  #     - path: /
  #       pathType: Prefix
  # - enabled: true
  #   host: "admin.myapp.example.com"
  #   className: "nginx"
  #   tls: true
  #   annotations:
  #     nginx.ingress.kubernetes.io/auth-type: basic
  #     nginx.ingress.kubernetes.io/auth-secret: admin-auth
  #   paths:
  #     - path: /admin
  #       pathType: Prefix

# Simplified Ingress configuration with Let's Encrypt and External DNS automation
# Just provide domain, cert-manager issuer, and external DNS config - everything else is automated
simpleIngress: []
  # Example configuration:
  # - enabled: true
  #   domain: "metacard-sso-dev.pfnapp.dev"  # Just the domain - host and TLS secret auto-generated
  #   className: "haproxy"
  #   tls: true  # Enable TLS - secret name auto-generated as "metacard-sso-dev-pfnapp-dev-tls"
  #   # tlsSecretName: "custom-tls-secret"  # Optional: override auto-generated TLS secret name
  #   certManager:
  #     enabled: true
  #     issuer: "pfnapp-dev"  # cert-manager cluster issuer name
  #   externalDns:
  #     enabled: true
  #     target: "cname-sg.pfnapp.com"  # external-dns target
  #     cloudflareProxied: false  # Optional: set cloudflare proxy status
  #   # paths:  # Optional: defaults to [{"path": "/", "pathType": "Prefix"}]
  #   #   - path: /
  #   #     pathType: Prefix
  #   # annotations:  # Optional: additional custom annotations
  #   #   custom.annotation/key: "value"

# Environment variables from ConfigMap (creates ConfigMap managed by Helm)
configMap:
  enabled: false
  data: {}
    # Example:
    # DATABASE_HOST: "postgres.example.com"
    # DATABASE_PORT: "5432"
    # LOG_LEVEL: "info"

# Environment variables from Secret (creates Secret managed by Helm)
secret:
  enabled: false
  data: {}
    # Example:
    # DATABASE_PASSWORD: "c2VjcmV0cGFzcw=="  # base64 encoded
    # API_TOKEN: "dG9rZW4xMjM="          # base64 encoded

# Environment variables (supports both direct values and references to external ConfigMaps/Secrets)
env: []
  # Examples:
  # - name: "ENVIRONMENT"           # Direct value
  #   value: "production"
  # - name: "DATABASE_URL"          # From external ConfigMap
  #   valueFrom:
  #     configMapKeyRef:
  #       name: "database-config"
  #       key: "url"
  #       optional: false           # Optional: set to true if the key might not exist
  # - name: "API_KEY"               # From external Secret
  #   valueFrom:
  #     secretKeyRef:
  #       name: "api-secrets"
  #       key: "key"
  #       optional: false
  # - name: "POD_NAME"              # From field reference
  #   valueFrom:
  #     fieldRef:
  #       fieldPath: "metadata.name"
  # - name: "CPU_REQUEST"           # From resource field reference
  #   valueFrom:
  #     resourceFieldRef:
  #       resource: "requests.cpu"

# Environment variables from external ConfigMaps/Secrets (loads all keys as env vars)
envFrom: []
  # Examples:
  # - configMapRef:                 # Load all keys from external ConfigMap
  #     name: "app-config"
  #     optional: false             # Optional: set to true if ConfigMap might not exist
  # - secretRef:                    # Load all keys from external Secret
  #     name: "app-secrets"
  #     optional: false

# Logging configuration
logging:
  enabled: false
  # When enabled, appends "-service" to deployment name and adds log taints

# StatefulSet specific configuration
statefulset:
  serviceName: ""  # Leave empty to auto-generate same as service name
  volumeClaimTemplates: []
    # Example:
    # - metadata:
    #     name: data
    #   spec:
    #     accessModes: ["ReadWriteOnce"]
    #     storageClassName: "fast-ssd"
    #     resources:
    #       requests:
    #         storage: 10Gi

# Container ports
containerPorts:
  - containerPort: 80
    name: http

# Liveness and readiness probes
livenessProbe: {}
  # Example:
  # httpGet:
  #   path: /health
  #   port: http
  # initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 3
readinessProbe: {}
  # Example:
  # httpGet:
  #   path: /ready
  #   port: http
  # initialDelaySeconds: 5
  # periodSeconds: 5
  # timeoutSeconds: 3
  # failureThreshold: 3

# Startup probe
startupProbe: {}
  # Example:
  # httpGet:
  #   path: /health
  #   port: http
  # initialDelaySeconds: 10
  # periodSeconds: 5
  # timeoutSeconds: 3
  # failureThreshold: 30

# Simplified probes - just provide path and optionally port, other values use defaults
simpleLivenessProbe: {}
  # Example:
  # httpGet:
  #   path: "/health"           # Required
  #   port: "http"              # Optional: defaults to "http"
  # initialDelaySeconds: 30     # Optional: defaults to 30
  # periodSeconds: 10           # Optional: defaults to 10
  # timeoutSeconds: 5           # Optional: defaults to 5
  # failureThreshold: 3         # Optional: defaults to 3

simpleReadinessProbe: {}
  # Example:
  # httpGet:
  #   path: "/ready"            # Required
  #   port: "http"              # Optional: defaults to "http"
  # initialDelaySeconds: 5      # Optional: defaults to 5
  # periodSeconds: 5            # Optional: defaults to 5
  # timeoutSeconds: 3           # Optional: defaults to 3
  # failureThreshold: 3         # Optional: defaults to 3

simpleStartupProbe: {}
  # Example:
  # httpGet:
  #   path: "/health"           # Required
  #   port: "http"              # Optional: defaults to "http"
  # initialDelaySeconds: 10     # Optional: defaults to 10
  # periodSeconds: 5            # Optional: defaults to 5
  # timeoutSeconds: 3           # Optional: defaults to 3
  # failureThreshold: 30        # Optional: defaults to 30

# Volume mounts (standard Kubernetes volumeMounts)
volumeMounts: []
  # Example:
  # - name: config-volume
  #   mountPath: /etc/config
  #   readOnly: true
  # - name: data-volume
  #   mountPath: /data

# Volumes (standard Kubernetes volumes)
volumes: []
  # Example:
  # - name: config-volume
  #   configMap:
  #     name: my-config
  # - name: data-volume
  #   persistentVolumeClaim:
  #     claimName: data-pvc
  # - name: secret-volume
  #   secret:
  #     secretName: my-secret

# Simple file mounts for external ConfigMaps/Secrets
simpleMounts: []
  # Examples:
  # - mountPath: "/etc/config"        # Where to mount
  #   configMap: "my-app-config"      # ConfigMap name
  # - mountPath: "/etc/secrets"
  #   secret: "my-app-secrets"        # Secret name