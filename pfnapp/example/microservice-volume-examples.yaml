# Microservice Volume Mount Examples
# Real-world examples for common microservice patterns

app:
  name: "user-service"
  version: "1.2.3"

deploymentType: "deployment"
replicaCount: 3

image:
  repository: "mycompany/user-service"
  tag: "v1.2.3"
  pullPolicy: IfNotPresent

# ==============================================================================
# MICROSERVICE CONFIGURATION PATTERN
# ==============================================================================
volumeConfigMaps:
  enabled: true
  items:
    # ========================================
    # Service Configuration
    # ========================================
    - name: "service-config"
      mountPath: "/app/config"
      readOnly: true
      defaultMode: 0644
      data:
        "application.yaml": |
          server:
            port: 8080
            servlet:
              context-path: /api/v1
          
          spring:
            application:
              name: user-service
            profiles:
              active: production
            datasource:
              url: jdbc:postgresql://postgres:5432/users
              driver-class-name: org.postgresql.Driver
              hikari:
                maximum-pool-size: 20
                minimum-idle: 5
            redis:
              host: redis
              port: 6379
              timeout: 2000
              lettuce:
                pool:
                  max-active: 20
                  max-idle: 10
          
          logging:
            level:
              com.company.userservice: DEBUG
              org.springframework.security: INFO
            pattern:
              console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
        
        "feature-flags.yaml": |
          features:
            user-registration:
              enabled: true
              rate-limit: 100
            email-verification:
              enabled: true
              provider: "sendgrid"
            two-factor-auth:
              enabled: false
              rollout-percentage: 10
            user-export:
              enabled: true
              allowed-roles: ["admin", "support"]

    # ========================================
    # Monitoring and Observability Configuration
    # ========================================
    - name: "monitoring-config"
      mountPath: "/app/monitoring"
      readOnly: true
      data:
        "prometheus.yaml": |
          # Prometheus scraping configuration
          scrape_configs:
            - job_name: 'user-service'
              metrics_path: '/actuator/prometheus'
              scrape_interval: 30s
              static_configs:
                - targets: ['localhost:8080']
        
        "jaeger.yaml": |
          # Jaeger tracing configuration
          jaeger:
            service-name: user-service
            sampler:
              type: probabilistic
              param: 0.1
            reporter:
              log-spans: false
              agent-host: jaeger-agent
              agent-port: 6831

    # ========================================
    # API Gateway Configuration
    # ========================================
    - name: "gateway-config"
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: "default.conf"
      readOnly: true
      data:
        "default.conf": |
          upstream user_service {
              server localhost:8080;
              keepalive 32;
          }
          
          server {
              listen 80;
              server_name _;
              
              # Health check endpoint
              location /health {
                  access_log off;
                  proxy_pass http://user_service/actuator/health;
              }
              
              # API endpoints
              location /api/v1/users {
                  proxy_pass http://user_service;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # Rate limiting
                  limit_req zone=api burst=20 nodelay;
              }
              
              # Admin endpoints (restricted)
              location /api/v1/admin {
                  allow 10.0.0.0/8;
                  deny all;
                  proxy_pass http://user_service;
              }
          }

# ==============================================================================
# MICROSERVICE SECRETS PATTERN
# ==============================================================================
volumeSecrets:
  enabled: true
  items:
    # ========================================
    # Database Credentials
    # ========================================
    - name: "database-secrets"
      mountPath: "/app/secrets/database"
      readOnly: true
      defaultMode: 0400
      stringData:
        "username": "user_service_app"
        "password": "super-secure-db-password-2024"
        "readonly-username": "user_service_readonly"
        "readonly-password": "readonly-password-2024"
        "admin-username": "postgres"
        "admin-password": "admin-super-secret-password"

    # ========================================
    # External Service API Keys
    # ========================================
    - name: "external-apis"
      mountPath: "/app/secrets/apis"
      readOnly: true
      defaultMode: 0440
      stringData:
        "sendgrid-api-key": "SG.1234567890abcdefghijklmnopqrstuvwxyz"
        "twilio-account-sid": "AC1234567890abcdefghijklmnopqrstuvwx"
        "twilio-auth-token": "auth-token-1234567890abcdefghijklmnop"
        "stripe-secret-key": "sk_live_1234567890abcdefghijklmnopqrstuvwxyz"
        "aws-access-key-id": "AKIAIOSFODNN7EXAMPLE"
        "aws-secret-access-key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

    # ========================================
    # JWT and Encryption Keys
    # ========================================
    - name: "crypto-keys"
      mountPath: "/app/secrets/crypto"
      readOnly: true
      defaultMode: 0400
      stringData:
        "jwt-private-key": |
          -----BEGIN RSA PRIVATE KEY-----
          MIIEpAIBAAKCAQEAu1SU1LfVLPHCozMxH2Mo4lgOEePzNm0tRgeLezV6ffAt0gun
          VBfLfWoFRJ2c9lztEjxNhlNrg6wUnrF0VpYJDzOujt5tnVGbvfSJZJP8ZG8ZqT1l
          UmtHklzVjbkqDjW7g3kpgf9k2L2mXrN+gqrD5BgjNqj5YrS3w2oU2Z5VyxY=
          -----END RSA PRIVATE KEY-----
        "jwt-public-key": |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1SU1LfVLPHCozMxH2Mo
          4lgOEePzNm0tRgeLezV6ffAt0gunVBfLfWoFRJ2c9lztEjxNhlNrg6wUnrF0VpYJ
          DzOujt5tnVGbvfSJZJP8ZG8ZqT1lUmtHklzVjbkqDjW7g3kpgf9k2L2mXrN+gqr=
          -----END PUBLIC KEY-----
        "encryption-key": "1234567890abcdef1234567890abcdef"  # 32-byte key for AES-256
        "salt": "salt1234567890ab"  # For password hashing

    # ========================================
    # TLS Certificates for mTLS
    # ========================================
    - name: "mtls-certs"
      mountPath: "/app/certs"
      readOnly: true
      defaultMode: 0444  # Certificates can be world-readable
      stringData:
        "ca.crt": |
          -----BEGIN CERTIFICATE-----
          MIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQwHhcNMTcwODI3MjM1NDA3WhcNMTgwODI3MjM1NDA3WjBF
          -----END CERTIFICATE-----
        "client.crt": |
          -----BEGIN CERTIFICATE-----
          MIIDXTCCAkWgAwIBAgIJAKoK/heBjcOuMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQwHhcNMTcwODI3MjM1NDA3WhcNMTgwODI3MjM1NDA3WjBF
          -----END CERTIFICATE-----
        "client.key": |
          -----BEGIN PRIVATE KEY-----
          MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC5T7QU6Q5/1hN5
          PcPKQ9JMqTkJyGN7wTZfN3t1HfV6hGYRFuL9v4V8tL4DGq4o8yJ9wNnGxJpPHuL2
          -----END PRIVATE KEY-----

# Service configuration
service:
  enabled: true
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: metrics

# Container ports
containerPorts:
  - containerPort: 8080
    name: http
  - containerPort: 9090
    name: metrics

# Health checks
simpleLivenessProbe:
  httpGet:
    path: "/actuator/health/liveness"
    port: "http"

simpleReadinessProbe:
  httpGet:
    path: "/actuator/health/readiness"
    port: "http"

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Environment variables (using references to mounted secrets)
env:
  - name: "DATABASE_USERNAME"
    valueFrom:
      secretKeyRef:
        name: "external-database-credentials"
        key: "username"
  - name: "DATABASE_PASSWORD"
    valueFrom:
      secretKeyRef:
        name: "external-database-credentials"
        key: "password"
  - name: "SPRING_PROFILES_ACTIVE"
    value: "production"

# Auto-scaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70