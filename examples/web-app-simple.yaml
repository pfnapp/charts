# Simple Web Application
# Target: Basic web application with simple ingress and autoscaling
# Chart: pfnapp/deploy
# Features: Basic deployment, ingress, HPA, shared storage for static assets

# Basic application configuration
image:
  repository: nginx
  tag: "1.24-alpine"
  pullPolicy: IfNotPresent

# Multiple replicas for high availability
replicaCount: 3

# Resource management for web workload
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Horizontal Pod Autoscaler for traffic spikes
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Simple ingress for web traffic
simpleIngress:
  enabled: true
  hosts:
    - host: mywebapp.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    enabled: true
    certManager: true
    hosts:
      - mywebapp.example.com

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 80

# Health checks for web application
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

# Simple storage for static assets (shared across pods)
simpleStorage:
  enabled: true
  size: 5Gi
  storageClass: "fast-ssd"
  mountPath: /usr/share/nginx/html
  accessModes:
    - ReadWriteMany  # Shared storage for static assets

# Environment variables
env:
  - name: APP_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"

# ConfigMap for nginx configuration
configMap:
  enabled: true
  data:
    nginx.conf: |
      events {
        worker_connections 1024;
      }
      http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        server {
          listen 80;
          server_name _;
          root /usr/share/nginx/html;
          index index.html;
          
          location / {
            try_files $uri $uri/ =404;
          }
          
          location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
          }
        }
      }

# Mount custom nginx config
volumeMounts:
  - name: nginx-config
    mountPath: /etc/nginx/nginx.conf
    subPath: nginx.conf

volumes:
  - name: nginx-config
    configMap:
      name: "{{ include \"deploy.fullname\" . }}"
      items:
        - key: nginx.conf
          path: nginx.conf

# Enable logging for log aggregation
logging:
  enabled: true

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 101  # nginx user
  fsGroup: 101

podSecurityContext:
  seccompProfile:
    type: RuntimeDefault

# Node preferences for web workloads
nodeSelector:
  workload-type: web

# Tolerations for dedicated web nodes
tolerations:
  - key: workload-type
    operator: Equal
    value: web
    effect: NoSchedule